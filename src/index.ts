import { execSync } from 'node:child_process'

import { getInput, info, warning } from '@actions/core'
import { context, getOctokit } from '@actions/github'

const octokit = getOctokit(process.env.GITHUB_TOKEN)

const base = getInput('base') || execSync('git rev-parse --abbrev-ref HEAD', { encoding: 'utf-8' }).trim()
const head = getInput('head')

const root = getInput('root') || process.cwd()

try {
  execSync(`git checkout ${head}`)
  info(`Checking out existing branch ${head} and discarding commits`)
  execSync(`git reset --hard origin/${base}`)
} catch (e) {
  info(`Creating new branch ${head}`)
  execSync(`git checkout -b ${head}`)
}

execSync('git config --global user.email "nuxtbot@roe.dev"')
execSync('git config --global user.name "ðŸ¤– Nuxtbot"')

// Upgrade Nuxt packages
execSync('npx @antfu/ni -D nuxt@npm:nuxt-nightly@latest', { cwd: root })
execSync('npx @antfu/ni -D @nuxt/kit@npm:@nuxt/kit-nightly@latest', { cwd: root })
execSync('npx @antfu/ni -D @nuxt/schema@npm:@nuxt/schema-nightly@latest', { cwd: root })
execSync('npx @antfu/ni -D @nuxt/vite-builder@npm:@nuxt/vite-builder-nightly@latest', { cwd: root })

// TODO: dedupe dependencies
// TODO: add package resolutions for nuxt nightly versions

execSync('git commit -am "chore: upgrade nuxt"')
execSync(`git push -u origin ${head} --force`)

octokit.rest.pulls.list({
  ...context.repo,
  base,
  head
}).then(prs => {
  if (prs.data.length > 0) {
    info(`Not creating new PR as it already exists`)
    return
  }

  octokit.rest.pulls.create({
    title: 'Try latest Nuxt nightly version',
    body: 'This PR is automatically generated by the Nuxt Nightly action. You can close it and it will be reopened with the latest changes the next time the action runs.',
    base,
    head,
    owner: context.repo.owner,
    repo: context.repo.repo,
    draft: true,
  })
})
